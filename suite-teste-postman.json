{
	"info": {
		"_postman_id": "c45545f3-9e5b-43a0-92ab-bc026aa9bb08",
		"name": "Course-aitomation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Details about a user",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbkBkY3guY29tLmJyIiwiZXhwIjoxNjEwNjQzNzUzfQ.gehZCMO7LdFI18EwfRIrEhe2meRtJw7WBGM331g4dW7fyAKEdraWT-w9WTbk9ORM644BL9ANPkAYYtWP2vSZyQ",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://127.0.0.1:8080/users/details",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"users",
								"details"
							]
						}
					},
					"response": [
						{
							"name": "Details about a user",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user?id=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user"
									],
									"query": [
										{
											"key": "id",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "x-next",
									"value": "eiusmod eu reprehend",
									"description": "A link to the next page of responses"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": 57666728,\n \"name\": \"aliquip voluptate\",\n \"tag\": \"id est\"\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user?id=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user"
									],
									"query": [
										{
											"key": "id",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": -23928189,\n \"message\": \"esse dolor enim\"\n}"
						}
					]
				},
				{
					"name": "Login",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "user",
									"type": "string"
								},
								{
									"key": "password",
									"value": "80b78099-540d-4320-9385-5b5c0742fcef",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n    \"email\": \"admin@dcx.com.br\",\n    \"password\": \"12345689\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8080/auth/login",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://127.0.0.1:8080/users",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save new user",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Marcos\",\n    \"email\": \"marcos@admin.com\",\n    \"password\": \"1234\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{urlUser}}",
							"host": [
								"{{urlUser}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar usu√°rio",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbkBkY3guY29tLmJyIiwiZXhwIjoxNjEwNjM0NTc0fQ.zLZ5FYYs9EhT1hZ6nUd3HtiWFFfq4QD0GcpXZVs9ynVI4BgpGrIezYa0YY1refHuw00AfTR0bCNR20HQdV-fzw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 18,\n    \"name\": \"a\",\n    \"email\": \"admin@dcx.com.br\",\n    \"password\": \"12345689\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8080/users",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Posts",
			"item": [
				{
					"name": "Create new pot",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbkBkY3guY29tLmJyIiwiZXhwIjoxNjEwNjQzNzUzfQ.gehZCMO7LdFI18EwfRIrEhe2meRtJw7WBGM331g4dW7fyAKEdraWT-w9WTbk9ORM644BL9ANPkAYYtWP2vSZyQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"titulo\": \"pos1t legal\",\n    \"texto\": \"aqui vai o texto\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8080/posts",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "All posts",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbkBkY3guY29tLmJyIiwiZXhwIjoxNjEwNjQzNzUzfQ.gehZCMO7LdFI18EwfRIrEhe2meRtJw7WBGM331g4dW7fyAKEdraWT-w9WTbk9ORM644BL9ANPkAYYtWP2vSZyQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8080/posts",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update post",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbkBkY3guY29tLmJyIiwiZXhwIjoxNjEwNjQ1NTY0fQ.XptEIbXQNW6amr_ti9-M5lC3_MXgUwmeEUdZnzXqvEurMuZ4INCL6LOWaDOg1wTbpHtHfdQcm6llbHI_0P7QzQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"titulo\": \"\",\n    \"texto\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8080/posts/31",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"posts",
								"31"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Post",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbkBnbWFpbC5jb20uYnIiLCJleHAiOjE2MDk4MDUxMzl9.dCbRlpi41WRPPj006qcIAgrLIxqVljxyEKAaeMWmmxcWblSHCfMMoJKXYWPvEjMu8acwaoBXci1MKRvA820uwA",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://127.0.0.1:8080/posts/22",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"posts",
								"22"
							]
						}
					},
					"response": []
				},
				{
					"name": "One post",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJtYXJjb3NAbWFyY29zLmNvbSIsImV4cCI6MTYxMDYyOTIyM30.xPmuWKmO7d4VOJ00JFvYODuE_aSrp6VaNf8dzeMnmgwpk8flJv56T1sSMFuUCbsqj6NPn9PZeG2WdToEl6A5dg",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://127.0.0.1:8080/posts",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"posts"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Automatizados",
			"item": [
				{
					"name": "Ususario",
					"item": [
						{
							"name": "Login automatized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/**",
											" * Generate a token for user",
											" * @param email",
											" * @param password",
											" * @returns String",
											" */",
											"// const userLogged = {",
											"//     \"email\": \"marcos@marcos.com\",",
											"//     \"password\": \"admin\"",
											"// }",
											"",
											"// pm.sendRequest({",
											"//     url: \"http://127.0.0.1:8080/auth/login\",",
											"//     method: 'POST',",
											"//     header: 'headername1:value1',",
											"//     body: {",
											"//         mode: 'raw',",
											"//         raw: JSON.stringify(pm.environment.get('usserLogged'))",
											"//     }",
											"// }, function (err, res) {",
											"//     console.log(res);",
											"// });",
											"",
											"",
											"pm.test('Sucesso', () => {",
											"    pm.expect(pm.response.code).to.be.eqls(200); // se retornar 200 √© porque deu certo",
											"});",
											"",
											"// pm.test('Pegar dados do Github', function(){",
											"//     pm.sendRequest(baseUrl + \"usersass\", (error, res) => {",
											"//         console.log(res.json());",
											"//     });",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\n    \"email\": \"marcos@marcos.com.br\",\n    \"password\": \"admin\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8080/auth/login",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8080",
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new user automatized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Sucesso', () => {",
											"    pm.expect(pm.response.code).to.be.eqls(201); // se retornar 201 o usu√°rio foi cllicardo",
											"});",
											"",
											"// Objeto utilizado para a valida√ß√£o dos dados",
											"const userCreated = {",
											"    \"name\": \"name1\",",
											"    \"email\": \"marcos@raimundo.dcx.ufpb.com.br\",",
											"    \"password\": \"12345677801010\"",
											"}",
											"/**",
											" * Create a new user in API",
											" * @param name",
											" * @param email unique",
											" * @param password",
											" * @returns JSON",
											" */",
											"pm.test('Compare resultados', () => {",
											"    const responseJson = pm.response.json(); // Recupera o JSON de retorno e armazena na vari√°vel",
											"    pm.expect(responseJson.name).to.be.eqls(userCreated.name); // verificando se o nome est√° igual",
											"    pm.expect(responseJson.email).to.be.eqls(userCreated.email); // verificando se o email est√° igual",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"name1\",\n    \"email\": \"marcos@raimundo.dcx.ufpb.com.br\",\n    \"password\": \"12345677801010\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlUser}}",
									"host": [
										"{{urlUser}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find users automatized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/**",
											" * retorna todos os usu√°rios cadastrados no sistema",
											" * @param null ",
											" * @returns JSON",
											" */",
											"pm.test('Sucesso', () => {",
											"    pm.expect(pm.response.code).to.be.eqls(200); // status 200 OK",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlUser}}",
									"host": [
										"{{urlUser}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find one user automatized",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/**",
											" * Adocionando o cabe√ßalho na requisi√ß√£o",
											" */",
											"pm.request.headers.add({",
											"    key: \"Authorization\",",
											"    value: \"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJtYXJjb3NAbWFyY29zLmNvbS5iciIsImV4cCI6MTYxMDcxNTU0MX0.vCfxT7bKcmzO22yXtwz-vRF8m3wTTeliLrNGr-GxAsGDrU8_LH-4xP4w2N1aBE5a41btN4TCK7lA2mjKo2h7aQ\"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/**",
											" * Retorna detalhes de um √∫nico usu√°rio",
											" * @augments authorizatiom ",
											" * @returns JSON",
											" */",
											"",
											"pm.test('Sucesso', () => {",
											"    pm.expect(pm.response.code).to.be.eqls(200); // requisi√ß√£o realizada com sucesso",
											"});",
											"",
											"// vari√°vel usada para verificar se os dados ir√£o ser retornados com sucesso",
											"const userLogged = {",
											"    \"name\": \"admin\",",
											"    \"email\": \"marcos@marcos.com.br\",",
											"    \"posts\": []",
											"}",
											"const responseJson = pm.response.json() // resposta recebida da requisi√ß√£o",
											"",
											"// verificando se os dados retornados s√£o os corretos",
											"pm.test('comparando os dados', () => {",
											"    pm.expect(responseJson.name).eqls(userLogged.name);",
											"    pm.expect(responseJson.email).eqls(userLogged.email);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlUser}}/details",
									"host": [
										"{{urlUser}}"
									],
									"path": [
										"details"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Post",
					"item": [
						{
							"name": "All posts automatized",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/**",
											" * Retorna todos os posts cadastrados ",
											" * ",
											" * @param none",
											" * ",
											" * @returns JSON",
											" */",
											"",
											"pm.test('Sucesso', () => {",
											"    pm.expect(pm.response.code).to.be.eqls(200); // se retornar 200 deu certo",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8080/posts",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8080",
									"path": [
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "One post automatized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/**",
											" * Retorna detalhes de um √∫nico post",
											" * ",
											" * @param id",
											" * ",
											" * @returns JSON",
											" */",
											"",
											"pm.test('Sucesso', () => {",
											"    pm.expect(pm.response.code).to.be.eqls(200); // status 200 ok",
											"});",
											"// vari√°vel para valida√ß√£o",
											"const postValidate = {",
											"    \"titulo\": \"post 1\",",
											"    \"autor\": {",
											"        \"id\": 19,",
											"        \"email\": \"marcos@marcos.com.br\",",
											"        \"name\": \"admin\"",
											"    },",
											"    \"data\": \"12-10-2012\",",
											"    \"texto\": \"texto\"",
											"};",
											"",
											"//resposta retornada da requisi√ß√£o",
											"const responseJSON = pm.response.json();",
											"",
											"// verificando os dados",
											"pm.test('Verificando os dados', () => {",
											"    pm.expect(responseJSON.id).to.be.eqls(postValidate.id);",
											"    pm.expect(responseJSON.titulo).to.be.eqls(postValidate.titulo);",
											"    pm.expect(responseJSON.autor.id).to.be.eqls(postValidate.autor.id);",
											"    pm.expect(responseJSON.autor.name).to.be.eqls(postValidate.autor.name);",
											"    pm.expect(responseJSON.autor.email).to.be.eqls(postValidate.autor.email);",
											"    pm.expect(responseJSON.data).to.be.eqls(postValidate.data);",
											"    pm.expect(responseJSON.texto).to.be.eqls(postValidate.texto);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8080/posts/23",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8080",
									"path": [
										"posts",
										"23"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete post automatized",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8080/posts/25",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8080",
									"path": [
										"posts",
										"25"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit post automatized",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/**",
											" * Retorna detalhes de um √∫nico post",
											" * ",
											" * @param id",
											" * @param titulo",
											" * @param autor",
											" * @param data",
											" * @param texto",
											" * ",
											" * @returns JSON",
											" */",
											"pm.test('Sucesso', () => {",
											"    pm.expect(pm.response.code).to.be.eqls(200);",
											"});",
											"",
											"// Vari√°vel utilizadao para valida√ß√£o dos dados",
											"const postValidate = {",
											"    \"titulo\": \"Automatiza√ß√£o com postman\",",
											"    \"autor\": {",
											"        \"id\": 19,",
											"        \"email\": \"marcos@marcos.com.br\",",
											"        \"name\": \"admin\"",
											"    },",
											"    \"data\": \"14-01-2021\",",
											"    \"texto\": \"Esse post foi alterado com teste automatizado do postman para explicar teste automatizado com postman\"",
											"};",
											"",
											"// Verificando se os dados retornados funcionam",
											"pm.test('Verificando os dados', () => {",
											"    const responseJSON = pm.response.json(); // vari√°vel retornada na resposta da requisi√ß√£o",
											"    pm.expect(responseJSON.id).to.be.eqls(postValidate.id);",
											"    pm.expect(responseJSON.titulo).to.be.eqls(postValidate.titulo);",
											"    pm.expect(responseJSON.autor.id).to.be.eqls(postValidate.autor.id);",
											"    pm.expect(responseJSON.autor.name).to.be.eqls(postValidate.autor.name);",
											"    pm.expect(responseJSON.autor.email).to.be.eqls(postValidate.autor.email);",
											"    pm.expect(responseJSON.data).to.be.eqls(postValidate.data);",
											"    pm.expect(responseJSON.texto).to.be.eqls(postValidate.texto);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"titulo\": \"Automatiza√ß√£o com postman\",\n    \"texto\": \"Esse post foi alterado com teste automatizado do postman para explicar teste automatizado com postman\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8080/posts/64",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8080",
									"path": [
										"posts",
										"64"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new post automatized",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/**",
											" * Retorna detalhes de um √∫nico post",
											" * ",
											" * @param id",
											" * @param titulo",
											" * @param autor",
											" * @param data",
											" * @param texto",
											" * ",
											" * @returns JSON",
											" */",
											"pm.test('Sucesso', () => {",
											"    pm.expect(pm.response.code).to.be.eqls(201); // status 201 - created",
											"});",
											"",
											"// Vari√°vel utilizadao para valida√ß√£o dos dados",
											"const postValidate = {",
											"    \"titulo\": \"post 1\",",
											"    \"autor\": {",
											"        \"id\": 19,",
											"        \"email\": \"marcos@marcos.com.br\",",
											"        \"name\": \"admin\"",
											"    },",
											"    \"data\": \"15-01-2021\",",
											"    \"texto\": \"texto\"",
											"};",
											"",
											"pm.test('Verificando os dados', () => {",
											"    const responseJSON = pm.response.json();",
											"    console.log(responseJSON);",
											"    pm.expect(responseJSON.titulo).to.be.eqls(postValidate.titulo);",
											"    pm.expect(responseJSON.autor.id).to.be.eqls(postValidate.autor.id);",
											"    pm.expect(responseJSON.autor.name).to.be.eqls(postValidate.autor.name);",
											"    pm.expect(responseJSON.autor.email).to.be.eqls(postValidate.autor.email);",
											"    pm.expect(responseJSON.data).to.be.eqls(postValidate.data);",
											"    pm.expect(responseJSON.texto).to.be.eqls(postValidate.texto);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"titulo\": \"post 1\",\n    \"texto\": \"texto\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8080/posts",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8080",
									"path": [
										"posts"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.request.headers.add({",
									"    key: \"Authorization\",",
									"    value: \"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJtYXJjb3NAbWFyY29zLmNvbS5iciIsImV4cCI6MTYxMDcxNTU0MX0.vCfxT7bKcmzO22yXtwz-vRF8m3wTTeliLrNGr-GxAsGDrU8_LH-4xP4w2N1aBE5a41btN4TCK7lA2mjKo2h7aQ\"",
									"})"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://petstore.swagger.io/v1"
		},
		{
			"key": "user1",
			"value": "{\n    \"titulo\": \"post 1\",\n    \"autor\": {\n            \"id\": 18,\n            \"name\": \"admin\",\n            \"email\": \"marcos@marcos.com\",\n   ..."
		},
		{
			"key": "post2",
			"value": "{\n    \"titulo\": \"post 2\",\n    \"autor\": {\n        \"id\": 18,\n        \"email\": \"marcos@marcos.com\",\n        \"name\": \"admin\"\n    },\n   ..."
		},
		{
			"key": "post1",
			"value": "{\n    \"titulo\": \"password\",\n    \"autor\": {\n            \"id\": 18,\n            \"name\": \"admin\",\n            \"email\": \"marcos@marcos.com\",\n ..."
		},
		{
			"key": "urlUser",
			"value": "http://127.0.0.1:8080/users"
		},
		{
			"key": "userAdmin",
			"value": "{\n    \"name\": \"admin\",\n    \"email\": \"admin@gmail.com.br\",\n    \"password\": \"admin\"\n}"
		}
	]
}